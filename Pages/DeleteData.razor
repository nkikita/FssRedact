@page "/DeleteData/{userId, ch, dataex, dataper}"

@using FssRedact.Helpers;
@using FssRedact.Services;
@using XMLFunctions;
@using FssRedact.Models;
@using System.Globalization;
@inject UserService UserService
@inject DialogService DialogService


    <RadzenButton Click="Delete" Class="rz-mt-4 rz-align-self-center" Text="Удалить?" ButtonStyle="ButtonStyle.Primary" />
       

 @code {
    string? begin_date;
    string? end_date;
    
    [Parameter] public int userId { get; set; }
    [Parameter] public int ch { get; set; }
    [Parameter] public ExcludePeriod? dataex { get; set; }
    [Parameter] public PeriodDate? dataper { get; set; }

    string? beginDateError;
    string? endDateError;

    private async Task Delete()
    {
        try
        {
            Console.WriteLine("Удаление записи...");

            if (ch == 1 && dataex?.Begin_date != null && dataex?.End_date != null)
            {
                Console.WriteLine($"Дата (Exclude): {dataex.Begin_date:dd.MM.yyyy} - {dataex.End_date:dd.MM.yyyy}");

                await DeleteFuncExclude.DeleteExcludePeriod(userId,  dataex.Begin_date.Value.ToString("dd.MM.yyyy"), dataex.End_date.Value.ToString("dd.MM.yyyy"));
            }
            else if (ch == 2 && dataper?.Period_begin != null && dataper?.Period_end != null)
            {
                Console.WriteLine($"Дата (Period): {dataper.Period_begin.Value:dd.MM.yyyy} - {dataper.Period_end.Value:dd.MM.yyyy}");

                // Асинхронный вызов
                await DeleteFunctDown.DeleteDownPeriod(userId, dataper.Period_begin.Value.ToString("dd.MM.yyyy"), dataper.Period_end.Value.ToString("dd.MM.yyyy"));
            }

            DialogService.Close();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Открываем диалог с ошибкой
            await DialogService.OpenAsync<ShowError>("Ошибка", new Dictionary<string, object>
            {
                { "ex", ex }
            });
            StateHasChanged();
        }
    }
}