@page "/ChangeData/{userId:int}/{ch:int}"

@using FssRedact.Helpers;
@using XMLFunctions;
@using FssRedact.Services;
@using FssRedact.Models;
@using System.Globalization;
@inject UserService UserService
@inject DialogService DialogService

<RadzenCard Style="max-width: 600px; padding: 20px;">
    <RadzenStack Orientation="Orientation.Vertical" Gap="1rem">
         <RadzenLabel>Новая дата</RadzenLabel>
        <RadzenDropDown TValue="string"
                Data="@options"
                TextProperty="Text"
                ValueProperty="Value"
                @bind-Value="newselectedValue"
                Placeholder="Выберите вариант" />

        <RadzenMask Mask="**-**-****" CharacterPattern="[0-9]" Placeholder="dd-MM-yyyy" @bind-Value="newbegin_date" @onblur="ValidateBeginDate" />
        
        <RadzenLabel Text="@beginDateError" Style="color: red;" Visible="@(!string.IsNullOrEmpty(beginDateError))" />
        
        <RadzenMask Mask="**-**-****" CharacterPattern="[0-9]" Placeholder="dd-MM-yyyy" @bind-Value="newend_date" @onblur="ValidateEndDate" />

        <RadzenLabel Text="@endDateError" Style="color: red;" Visible="@(!string.IsNullOrEmpty(endDateError))" />

        <RadzenButton Click="UpdateData">Заменить</RadzenButton>
    </RadzenStack>
</RadzenCard>

@code {
    string? oldselectedValue;
    string? newselectedValue;
    
    [Parameter] public ExcludePeriod? dataex{get; set;}
    
    [Parameter] public PeriodDate? dataper{get; set;}
    private List<Option> options = new()
    {
        new Option { Value = "1", Text = "Работа" },
        new Option { Value = "2", Text = "Больничный" },
        new Option { Value = "3", Text = "Учеба" }
    };

    
    [Parameter] public int userId { get; set; }
    [Parameter] public int ch { get; set; }
    string? newbegin_date;
    string? newend_date;
    
    string? beginDateError;
    string? endDateError;


    private void ValidateBeginDate(FocusEventArgs args)
    {
        beginDateError = DateValidationHelper.ValidateSingleDate(newbegin_date);
    }

    private void ValidateEndDate(FocusEventArgs args)
    {
        endDateError = DateValidationHelper.ValidateSingleDate(newend_date);

        if (string.IsNullOrEmpty(beginDateError) && string.IsNullOrEmpty(endDateError))
        {
            var rangeError = DateValidationHelper.ValidateDateRange(newbegin_date, newend_date);
            if (!string.IsNullOrEmpty(rangeError))
                endDateError = rangeError;
        }
    }
     private bool TryParseDate(string? date, out DateTime result)
    {
        return DateTime.TryParseExact(date, "dd-MM-yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out result);
    }

    private async Task UpdateData()
{
    try
    {
        ValidateBeginDate(null);
        ValidateEndDate(null);

        if (!string.IsNullOrEmpty(beginDateError) || !string.IsNullOrEmpty(endDateError))
        {
            await DialogService.Alert("Исправьте ошибки в датах перед отправкой.");
            return;
        }

        if (string.IsNullOrEmpty(newbegin_date) || string.IsNullOrEmpty(newend_date))
        {
            await DialogService.Alert("Введите даты корректно.");
            return;
        }

        if (ch == 1 && dataex?.Begin_date != null && dataex?.End_date != null && dataex.Period_type != null)
        {
           await EditFuncExclude.UpdateExcludePeriodAsync(
            userId, 
            dataex.Period_type.Value,                   
            dataex.Begin_date.Value.Date,                
            dataex.End_date.Value.Date,                  
            int.Parse(newselectedValue),                 
            DateTime.ParseExact(newbegin_date, "dd-MM-yyyy", CultureInfo.InvariantCulture),
            DateTime.ParseExact(newend_date, "dd-MM-yyyy", CultureInfo.InvariantCulture)
        );



        }
        else if (ch == 2 && dataper?.Period_begin != null && dataper?.Period_end != null && dataper?.Idle_average != null)
        {
           await EditFuncDown.UpdateDownPeriod(
                userId, 
                dataper.Period_begin.Value.Date.ToString("dd.MM.yyyy"),
                dataper.Period_end.Value.Date.ToString("dd.MM.yyyy"),
                dataper.Idle_average.Value.ToString(),
                DateTime.ParseExact(newbegin_date, "dd-MM-yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd"),
                DateTime.ParseExact(newend_date, "dd-MM-yyyy", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd"),
                newselectedValue.ToString()
            );
        }

        await DialogService.Alert("Данные успешно обновлены!");
        DialogService.Close();
        StateHasChanged();
    }
    catch (Exception ex)
    {
        await DialogService.Alert($"Ошибка: {ex.Message}");
    }
}

}
