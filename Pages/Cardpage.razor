@page "/{userId:int}"
@inject IJSRuntime JS
@using FssRedact.Services;
@using FssRedact.Models;
@inject UserService UserService
@inject DialogService DialogService
@inject AddressService AddressService

<RadzenStack Orientation="Orientation.Vertical" Gap="1rem">
    <RadzenStack Orientation="Orientation.Horizontal"  Style="justify-content: space-around;">

   
    <RadzenStack Gap="0.5rem">
        <RadzenText class="rz-mb-0" TextStyle="TextStyle.Overline">Фамилия</RadzenText>
        <RadzenText TextStyle="TextStyle.Body1"><b>@info?.First_Name</b></RadzenText>

        <RadzenText class="rz-mb-0" TextStyle="TextStyle.Overline">Имя</RadzenText>
        <RadzenText TextStyle="TextStyle.Body1"><b>@info?.Last_Name</b></RadzenText>

        <RadzenText class="rz-mb-0" TextStyle="TextStyle.Overline">Отчество</RadzenText>
        <RadzenText TextStyle="TextStyle.Body1"><b>@info?.Middle_Name</b></RadzenText>

        <RadzenText class="rz-mb-0" TextStyle="TextStyle.Overline">СНИЛС</RadzenText>
        <RadzenText TextStyle="TextStyle.Body1"><b>@info?.Snils</b></RadzenText>
    </RadzenStack>

    <RadzenStack Gap="0.5rem">
        <RadzenText TextStyle="TextStyle.Overline">Квартира</RadzenText>
        @if (IsEnabled)
        {
            <RadzenTextBox Style="width: 150px;" @bind-Value="editableFlat" MaxLength="3" Pattern="^[0-9]{1,3}$" />
        }
        else
        {
            <RadzenText class="labelsGF" TextStyle="TextStyle.Body1"><b>@userAdress?.Flat</b></RadzenText>
        }
        <RadzenText TextStyle="TextStyle.Overline">GUID</RadzenText>
        @if (IsEnabled)
        {
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenDropDown 
                @bind-Value=value 
                Data=@address 
                LoadData=@LoadData 
                Count="@count" 
                AllowVirtualization="true" 
                AllowClear="true" 
                Name="DropDownVirtualizationLoadData"
                AllowFiltering="true" 
                TextProperty="@nameof(Address.Value)"
                ValueProperty="@nameof(Address.ObjectGUID)" 
                Style="width: 100%; max-width: 1000px;" />
                </RadzenStack>
        }
          else
        {
            <RadzenText class="labelsGF" TextStyle="TextStyle.Body1"><b>@searchText</b></RadzenText>
        }

        <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem">
            <RadzenButton Click="Change" Class="rz-mt-4 rz-align-self-center" Text="@buttonText" ButtonStyle="ButtonStyle.Primary" />
        </RadzenStack>
    </RadzenStack>
    <RadzenButton Click="ExportToExcel">Сохранить данные</RadzenButton>

</RadzenStack>


    <RadzenStack class="gridstack">
        <RadzenLabel class="customLabels">Дата периода</RadzenLabel>
        <RadzenRow>
            <RadzenButton Icon="Add" Click="Add_down_data"/>
            <RadzenButton Icon="Delete" Click="Delete_down_data"/>
            <RadzenButton Icon="Edit" Click="Update_down_data"/>
        </RadzenRow>
        <RadzenDataGrid ColumnWidth="200px" AllowFiltering="true" TItem="PeriodDate" AllowPaging="true" PageSize="5" AllowSorting="true" Data="@periodDate" class=" rz-mb-4" style="z-index: 0;">
            <Columns>
                <RadzenDataGridColumn Property="@nameof(PeriodDate.Idle_average)" Filterable="false"  Title="Тип" Width="80px" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn Title="Дата создания" Width="160px"><Template Context="data">@data.Period_begin?.ToString("dd.MM.yyyy")</Template></RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Дата изменения" Width="160px"><Template Context="data">@data.Period_end?.ToString("dd.MM.yyyy")</Template></RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenStack>

    <RadzenStack class="gridstack">
        <RadzenLabel class="customLabels">Исключить период</RadzenLabel>
        <RadzenRow>
            <RadzenButton Icon="Add" Click="Add_exclude_data"/>
            <RadzenButton Icon="Delete" Click="Delete_exclude_data"/>
            <RadzenButton Icon="Edit" Click="Update_exclude_data"/>
        </RadzenRow>
        <RadzenDataGrid ColumnWidth="200px" AllowFiltering="true" TItem="ExcludePeriod" AllowPaging="true" PageSize="5" AllowSorting="true" Data="@excludePeriod" class=" rz-mb-4" style="z-index: 0;">
            <Columns>
                <RadzenDataGridColumn Property="@nameof(ExcludePeriod.Period_type)" Filterable="false"  Title="Тип" Width="80px" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn Title="Дата создания" Width="160px"><Template Context="data">@data.Begin_date?.ToString("dd.MM.yyyy")</Template></RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Дата изменения" Width="160px"><Template Context="data">@data.End_date?.ToString("dd.MM.yyyy")</Template></RadzenDataGridColumn>
                </Columns>
        </RadzenDataGrid>
    </RadzenStack>
    
</RadzenStack>



@code {  
    string searchText = "";
    private string? editableFlat, editableGuid, lastfilter;
    string? value = "";
    private string buttonText = "Изменить";
    private int ch = 0;
    private bool IsEnabled = false;
    [Parameter] public int userId { get; set; }
    private InsuredPerson? info;
    private IEnumerable<Address>? address;
    private UserAdress? userAdress; 
    private IEnumerable<PeriodDate>? periodDate;    
    private IEnumerable<ExcludePeriod>? excludePeriod;
    string token = "939358a987eb492cb4adc68ee9944fb014f184db";    
    int count;
    private IEnumerable<Address>? getAddress;

    async Task LoadData(LoadDataArgs args)
    {
        await Task.Yield();
       
        if (string.IsNullOrEmpty(args.Filter) )
        {
            getAddress = await AddressService.GetAddressList(value, token); // string value ="01cf0f7b-70fe-4804-8320-4cb3edb21354"; -- значение из xml
        }
        
        
        if (!string.IsNullOrEmpty(args.Filter) && lastfilter != args.Filter)
        {
            args.Skip = 0;
        }


        if (!string.IsNullOrEmpty(args.Filter))
        {
            lastfilter = args.Filter;
           // query = query.Where(c => c.CustomerID.ToLower().Contains(args.Filter.ToLower()) || c.ContactName.ToLower().Contains(args.Filter.ToLower()) || c.CompanyName.ToLower().Contains(args.Filter.ToLower()));
            getAddress = await AddressService.GetAddressList(args.Filter.ToLower().ToString(), token);
        }
        count = await Task.FromResult(getAddress?.Count() ?? 0);
        //count = await Task.FromResult(query.Count());
        address = await Task.FromResult((getAddress ?? Enumerable.Empty<Address>()).Skip(args.Skip ?? 0).Take(args.Top ?? 10).ToList());
        //customers = await Task.FromResult(query.Skip(args.Skip.HasValue ? args.Skip.Value : 0).Take(args.Top.HasValue ? args.Top.Value : 10).ToList());
    
        // Load selected items if outside of visible range
        if (!string.IsNullOrEmpty(value) && !address.Any(c => c.ObjectGUID == value))
        {
            var selected = await Task.FromResult(getAddress?.Where(c => c.ObjectGUID == value));
            address = address.Concat(selected ?? Enumerable.Empty<Address>());

        }
    }
    protected override async Task OnInitializedAsync()     
    {
        if (UserService != null)
        {
            excludePeriod = await UserService?.GetExclPeriodAsync(userId);
            periodDate = await UserService.GetDownPeriodAsync(userId);
            userAdress = await UserService.GetAdressInfoAsync(userId);
            editableFlat = userAdress?.Flat;
            editableGuid = userAdress?.Guid;
            value = editableGuid;
            address = await AddressService.GetAddressList(editableGuid, token);
            searchText = address?.FirstOrDefault()?.Value ?? string.Empty;
            info = await UserService.GetUserInfoAsync(userId);
        }
    }
    protected void Change()
    {
        if (buttonText == "Сохранить" && !string.IsNullOrWhiteSpace(userAdress.Flat) )
        {
            userAdress.Flat = editableFlat;
            userAdress.Guid = editableGuid;
            searchText = address.FirstOrDefault()?.Value;
            UserService.UpdateAdressInfoAsync(userId, editableFlat, value);
            buttonText = "Изменить";
            
        }
        else
        {
            editableFlat = userAdress?.Flat;
            editableGuid = userAdress?.Guid;
            buttonText = "Сохранить";
        }
        IsEnabled = !IsEnabled;
        StateHasChanged();
    }

    protected void Delete_exclude_data(){
        ch = 1;
        DialogService.OpenAsync<DeleteData>("Удаление записи " + userId, new Dictionary<string, object>
        {
            { "UserId", userId },
            { "ch", ch}
        }
        );
    }
    protected void Delete_down_data(){
        ch = 2;
        DialogService.OpenAsync<DeleteData>("Удаление записи " + userId, new Dictionary<string, object>
        {
            { "UserId", userId },
            { "ch", ch}
        }
        );
    }
    protected void Add_down_data(){
        ch = 2;
        DialogService.OpenAsync<AddData>("Добавление записи к " + userId + " пользователю", new Dictionary<string, object>
        {
            { "UserId", userId },
            { "ch", ch}
        }
        );
    }
    protected void Add_exclude_data(){
        ch = 1;
        DialogService.OpenAsync<AddData>("Добавление записи к " + userId + " пользователю", new Dictionary<string, object>
        {
            { "UserId", userId },
            { "ch", ch}
        }
        );
    }
    protected void Update_down_data(){
        ch = 2;
        DialogService.OpenAsync<ChangeData>("Обновление данных " + userId + " пользователю", new Dictionary<string, object>
        {
            { "UserId", userId },
            { "ch", ch}
        }
        );
    }
    protected void Update_exclude_data(){
        ch = 1;
        DialogService.OpenAsync<ChangeData>("Обновление данных " + userId + " пользователю", new Dictionary<string, object>
        {
            { "UserId", userId },
            { "ch", ch}
        }
        );
    }
    private async Task ExportToExcel()
    {
        using var workbook = new XLWorkbook();
        var worksheet = workbook.AddWorksheet("Данные");

        worksheet.Cell("A1").Value = "Имя";
        worksheet.Cell("B1").Value = "Фамилия";
        worksheet.Cell("C1").Value = "Отчество";
        worksheet.Cell("D1").Value = "СНИЛС";

        worksheet.Cell("A2").Value = info?.First_Name;
        worksheet.Cell("B2").Value = info?.Last_Name;
        worksheet.Cell("C2").Value = info?.Middle_Name;
        worksheet.Cell("D2").Value = info?.Snils;

        worksheet.Cell("G1").Value = "Квартира";
        worksheet.Cell("H1").Value = "GUID";

        worksheet.Cell("G2").Value = userAdress?.Flat;
        worksheet.Cell("H2").Value = searchText;

        int row = 4; 
        worksheet.Cell($"A{row}").Value = "Тип периода";
        worksheet.Cell($"B{row}").Value = "Дата начала";
        worksheet.Cell($"C{row}").Value = "Дата окончания";
        int rowdat = 4;
        worksheet.Cell($"E{row}").Value = "Тип периода";
        worksheet.Cell($"F{row}").Value = "Дата начала";
        worksheet.Cell($"G{row}").Value = "Дата окончания";

        row++;


        foreach (var period in excludePeriod ?? new List<ExcludePeriod>())
        {
            worksheet.Cell($"A{row}").Value = period.Period_type;
            worksheet.Cell($"B{row}").Value = period.Begin_date?.ToString("dd.MM.yyyy");
            worksheet.Cell($"C{row}").Value = period.End_date?.ToString("dd.MM.yyyy");
            row++;
        }

        rowdat++;

        foreach (var period in periodDate ?? new List<PeriodDate>())
        {
            worksheet.Cell($"E{rowdat}").Value = period.Idle_average;
            worksheet.Cell($"F{rowdat}").Value = period.Period_begin?.ToString("dd.MM.yyyy");
            worksheet.Cell($"G{rowdat}").Value = period.Period_end?.ToString("dd.MM.yyyy");
            rowdat++;
        }

        using var memoryStream = new MemoryStream();
        workbook.SaveAs(memoryStream);
        byte[] fileBytes = memoryStream.ToArray();

        string base64String = Convert.ToBase64String(fileBytes);

        await JS.InvokeVoidAsync("saveAsFile", "data.xlsx", base64String);
    }
}